{
  "name": "modella",
  "version": "0.1.6",
  "description": "simplified models",
  "keywords": [
    "modella",
    "models"
  ],
  "author": {
    "name": "matthew mueller",
    "email": "mattmuelle@gmail.com"
  },
  "dependencies": {
    "emitter-component": "1.0.1"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "express": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "# modella [![Build Status](https://secure.travis-ci.org/modella/modella.png?branch=master)](http://travis-ci.org/modella/modella)\n\n  simplified models\n\n## Philosophy\n\n`modella` is a bare bones model. It exposes a few APIs on which plugins can be\nbuilt to enhance functionality. Usage of these plugins enables high-powered but\nbloat free models.\n\n# Defining Models\n\nAll `modella` definition methods are chainable.\n\n### modella( modelName )\n\nCreates a new model with the name `modelName`.\n\n    var modella = require('modella'),\n           User = modella('User');\n\n\n### Model.use ( modellaPlugin )\n\nAs mentioned in the philosophy, `modella`'s goal is to make it easy to extend\nmodels with plugins. This lets you create models that do exactly what you need,\nand nothing more.\n\n    var modella = require('modella'),\n     validators = require('modella-validators'),\n           User = modella('User');\n\n    User.use(validators);\n\n### Model.attr( attrName, [options] )\n\nAdds attribute `attrName` to a model. Additional `options` can be passed in as\nan object. Modella does not use these options, but plugins may.\n\n    var modella = require('modella'),\n     validators = require('modella-validators'),\n           User = modella('User');\n\n    User.use(validators);\n\n    User\n      .attr('_id')\n      .attr('username', { required: true })\n      .attr('email', { required: true, format: 'email' });\n\n### Model.validate( fn )\n\nAdds a validator to the model. A validator should add error messages for\nattributes that fail validation. Note that plugins such as\n[modella/validators](http://github.com/modella/validators) make extensive use of\nthis.\n\n    var User = modella('User');\n\n    User.validate(function(user) {\n      if(!user.username()) {\n        user.error('username', \"is required\");\n      }\n    });\n\n# Working with Instances\n\n### new Model([initialValues])\n\nYou can create instances of models with the `new` operator. You can also specify\ninitial values by passing in an object for `initialValues`\n\n    var user = new User();\n\n    var bob = new User({username: 'Bob' });\n\n### Model#<attribute>(value)\n\nSets the given attribute to a value.\n\n    var user = new User();\n\n    user.username(\"Bob\");\n\n### Model#attribute()\n\nReturns the value of the attribute\n    \n    var user = new User({username: 'Bob'});\n\n    user.username()\n      => 'Bob'\n\n### Model#get( attribute )\n\nReturns the value of the attribute\n\n    var user = new User({username: 'Bob'});\n\n    user.get('username')\n      => 'Bob'\n\n### Model#has( attribute )\n\nReturns whether an instance has an attribute set.\n\n    var user = new User({username: 'Bob'});\n\n    user.has('email')\n      => false\n\n### Model#set( properties )\n\nQuickly sets multiple attributes.\n\n    var user = new User();\n\n    user.set({username: 'Bob', email: 'bob@bobbington.com'});\n\n### Model#primary()\n\nReturns the value of the primary key attribute. By default, this auto-maps to an\nattribute with the name of `_id` or `id` if it specified.\n\n    var User = modella('User').attr('_id');\n\n    var user = new User({_id: 123 });\n\n    user.primary();\n      => 123\n\n### Model#primary( value )\n\nSets the value of the primary key to `value`. By default primary key will map to\nan attribute with the name of `_id` or `id`\n\n    var User = modella('User').attr('_id');\n\n    var user = new User({_id: 123 });\n\n    user.primary(456);\n\n    user.primary();\n      => 456\n\n### Model#isNew()\n\nReturns whether the value of `Model#primary()` is blank.\n\n    var user = new User();\n    user.isNew()\n      => true\n\n    var oldUser = new User({_id: 555});\n    oldUser.isNew()\n      => false\n\n### Model.isValid()\n\nRuns all validators on the model and returns whether any validations failed.\n\n    var validators = require('modella-validators');\n\n    var User = modella('User')\n    User.use(validators);\n\n    User.attr('username', { required: true });\n\n    var user = new User();\n\n    user.isValid()\n      => false\n\n### Model#save( [cb(err)] )\n\nSaves the model using the `syncLayer`. Will not attempt to save if\n`model#isValid()` returns false.\n\nCalls `cb(err)` after save.\n\n### Model#remove( [cb(err)] )\n\nDeletes the model using the sync layer and marks it as `removed`.\n\nCalls `cb(err)` after remove.\n\n### Model#removed\n\nMarked as true if the model has been deleted.\n\n    user.remove()\n\n    user.removed\n      => true\n\n### Model#model\n\nPoints to the base model from which the instance was created.\n\n    var user = new User();\n\n    user.model === User\n      => true\n\n\n# Sync\n\nTODO: Write some documentation\n\n# Events\n\nAll modella models have built in emitters on both instances and the model\nitself.\n\nTODO: Write some documentation\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "_id": "modella@0.1.6",
  "_from": "modella@"
}
